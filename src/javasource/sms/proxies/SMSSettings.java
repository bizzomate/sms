// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package sms.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class SMSSettings
{
	private final IMendixObject sMSSettingsMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "SMS.SMSSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		IsActive("IsActive"),
		APIKey("APIKey"),
		From("From"),
		Balance("Balance"),
		BalanceLastUpdatedOn("BalanceLastUpdatedOn"),
		UpdateBalanceAfterSending("UpdateBalanceAfterSending"),
		TestPhoneNumber("TestPhoneNumber"),
		TestMessage("TestMessage");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public SMSSettings(IContext context)
	{
		this(context, Core.instantiate(context, "SMS.SMSSettings"));
	}

	protected SMSSettings(IContext context, IMendixObject sMSSettingsMendixObject)
	{
		if (sMSSettingsMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("SMS.SMSSettings", sMSSettingsMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a SMS.SMSSettings");

		this.sMSSettingsMendixObject = sMSSettingsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new SMSSettings(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static sms.proxies.SMSSettings create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "SMS.SMSSettings");
		return new sms.proxies.SMSSettings(context, mendixObject);
	}

	/**
	 * @deprecated Use 'SMSSettings.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static sms.proxies.SMSSettings initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return sms.proxies.SMSSettings.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static sms.proxies.SMSSettings initialize(IContext context, IMendixObject mendixObject)
	{
		return new sms.proxies.SMSSettings(context, mendixObject);
	}

	public static sms.proxies.SMSSettings load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return sms.proxies.SMSSettings.initialize(context, mendixObject);
	}

	public static java.util.List<sms.proxies.SMSSettings> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<sms.proxies.SMSSettings> result = new java.util.ArrayList<sms.proxies.SMSSettings>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//SMS.SMSSettings" + xpathConstraint))
			result.add(sms.proxies.SMSSettings.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of IsActive
	 */
	public final Boolean getIsActive()
	{
		return getIsActive(getContext());
	}

	/**
	 * @param context
	 * @return value of IsActive
	 */
	public final Boolean getIsActive(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.IsActive.toString());
	}

	/**
	 * Set value of IsActive
	 * @param isactive
	 */
	public final void setIsActive(Boolean isactive)
	{
		setIsActive(getContext(), isactive);
	}

	/**
	 * Set value of IsActive
	 * @param context
	 * @param isactive
	 */
	public final void setIsActive(IContext context, Boolean isactive)
	{
		getMendixObject().setValue(context, MemberNames.IsActive.toString(), isactive);
	}

	/**
	 * @return value of APIKey
	 */
	public final String getAPIKey()
	{
		return getAPIKey(getContext());
	}

	/**
	 * @param context
	 * @return value of APIKey
	 */
	public final String getAPIKey(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.APIKey.toString());
	}

	/**
	 * Set value of APIKey
	 * @param apikey
	 */
	public final void setAPIKey(String apikey)
	{
		setAPIKey(getContext(), apikey);
	}

	/**
	 * Set value of APIKey
	 * @param context
	 * @param apikey
	 */
	public final void setAPIKey(IContext context, String apikey)
	{
		getMendixObject().setValue(context, MemberNames.APIKey.toString(), apikey);
	}

	/**
	 * @return value of From
	 */
	public final String getFrom()
	{
		return getFrom(getContext());
	}

	/**
	 * @param context
	 * @return value of From
	 */
	public final String getFrom(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.From.toString());
	}

	/**
	 * Set value of From
	 * @param from
	 */
	public final void setFrom(String from)
	{
		setFrom(getContext(), from);
	}

	/**
	 * Set value of From
	 * @param context
	 * @param from
	 */
	public final void setFrom(IContext context, String from)
	{
		getMendixObject().setValue(context, MemberNames.From.toString(), from);
	}

	/**
	 * @return value of Balance
	 */
	public final String getBalance()
	{
		return getBalance(getContext());
	}

	/**
	 * @param context
	 * @return value of Balance
	 */
	public final String getBalance(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Balance.toString());
	}

	/**
	 * Set value of Balance
	 * @param balance
	 */
	public final void setBalance(String balance)
	{
		setBalance(getContext(), balance);
	}

	/**
	 * Set value of Balance
	 * @param context
	 * @param balance
	 */
	public final void setBalance(IContext context, String balance)
	{
		getMendixObject().setValue(context, MemberNames.Balance.toString(), balance);
	}

	/**
	 * @return value of BalanceLastUpdatedOn
	 */
	public final java.util.Date getBalanceLastUpdatedOn()
	{
		return getBalanceLastUpdatedOn(getContext());
	}

	/**
	 * @param context
	 * @return value of BalanceLastUpdatedOn
	 */
	public final java.util.Date getBalanceLastUpdatedOn(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.BalanceLastUpdatedOn.toString());
	}

	/**
	 * Set value of BalanceLastUpdatedOn
	 * @param balancelastupdatedon
	 */
	public final void setBalanceLastUpdatedOn(java.util.Date balancelastupdatedon)
	{
		setBalanceLastUpdatedOn(getContext(), balancelastupdatedon);
	}

	/**
	 * Set value of BalanceLastUpdatedOn
	 * @param context
	 * @param balancelastupdatedon
	 */
	public final void setBalanceLastUpdatedOn(IContext context, java.util.Date balancelastupdatedon)
	{
		getMendixObject().setValue(context, MemberNames.BalanceLastUpdatedOn.toString(), balancelastupdatedon);
	}

	/**
	 * @return value of UpdateBalanceAfterSending
	 */
	public final Boolean getUpdateBalanceAfterSending()
	{
		return getUpdateBalanceAfterSending(getContext());
	}

	/**
	 * @param context
	 * @return value of UpdateBalanceAfterSending
	 */
	public final Boolean getUpdateBalanceAfterSending(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.UpdateBalanceAfterSending.toString());
	}

	/**
	 * Set value of UpdateBalanceAfterSending
	 * @param updatebalanceaftersending
	 */
	public final void setUpdateBalanceAfterSending(Boolean updatebalanceaftersending)
	{
		setUpdateBalanceAfterSending(getContext(), updatebalanceaftersending);
	}

	/**
	 * Set value of UpdateBalanceAfterSending
	 * @param context
	 * @param updatebalanceaftersending
	 */
	public final void setUpdateBalanceAfterSending(IContext context, Boolean updatebalanceaftersending)
	{
		getMendixObject().setValue(context, MemberNames.UpdateBalanceAfterSending.toString(), updatebalanceaftersending);
	}

	/**
	 * @return value of TestPhoneNumber
	 */
	public final String getTestPhoneNumber()
	{
		return getTestPhoneNumber(getContext());
	}

	/**
	 * @param context
	 * @return value of TestPhoneNumber
	 */
	public final String getTestPhoneNumber(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.TestPhoneNumber.toString());
	}

	/**
	 * Set value of TestPhoneNumber
	 * @param testphonenumber
	 */
	public final void setTestPhoneNumber(String testphonenumber)
	{
		setTestPhoneNumber(getContext(), testphonenumber);
	}

	/**
	 * Set value of TestPhoneNumber
	 * @param context
	 * @param testphonenumber
	 */
	public final void setTestPhoneNumber(IContext context, String testphonenumber)
	{
		getMendixObject().setValue(context, MemberNames.TestPhoneNumber.toString(), testphonenumber);
	}

	/**
	 * @return value of TestMessage
	 */
	public final String getTestMessage()
	{
		return getTestMessage(getContext());
	}

	/**
	 * @param context
	 * @return value of TestMessage
	 */
	public final String getTestMessage(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.TestMessage.toString());
	}

	/**
	 * Set value of TestMessage
	 * @param testmessage
	 */
	public final void setTestMessage(String testmessage)
	{
		setTestMessage(getContext(), testmessage);
	}

	/**
	 * Set value of TestMessage
	 * @param context
	 * @param testmessage
	 */
	public final void setTestMessage(IContext context, String testmessage)
	{
		getMendixObject().setValue(context, MemberNames.TestMessage.toString(), testmessage);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return sMSSettingsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final sms.proxies.SMSSettings that = (sms.proxies.SMSSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "SMS.SMSSettings";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
